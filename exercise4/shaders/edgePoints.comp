#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_vulkan_glsl          : enable

layout(local_size_x = 64) in;


layout(set = 0, binding = 0) readonly buffer CPBuf {vec4 controlPoints[];};
layout(set = 0, binding = 2) readonly buffer EdgeBuf {uvec2 edgeList[];};
layout(set = 0, binding = 3) readonly buffer EdgeFace {uvec2 edgeToFace[];};
layout(set = 0, binding = 8) readonly buffer FacePtsBuf {vec4 facePoints[];};

layout(set = 0, binding = 9) writeonly buffer EdgePtsBuf {vec4 edgePoints[];};


layout(push_constant) uniform Constants {
    uint vertexCount;
    uint edgeCount;
    uint faceCount;
} pc;


void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= pc.edgeCount) return;
    vec3 ept;

    // Two points on the edge
    uvec2 ev = edgeList[gid];
    vec3 v0  = controlPoints[ev.x].xyz;
    vec3 v1  = controlPoints[ev.y].xyz;



    uvec2 fids = edgeToFace[gid];
    if (fids.x == 0xFFFFFFFFu || fids.y == 0xFFFFFFFFu)
    {
        // Boundry edge
        ept = (v0 + v1) * 0.5;
    }
    else
    {   
        // Interior edge
        vec3 f0 = facePoints[fids.x].xyz;
        vec3 f1 = facePoints[fids.y].xyz;
        ept = (v0 + v1 + f0 + f1) * 0.25;
    }
    edgePoints[gid] = vec4(ept, 0.0);
}

